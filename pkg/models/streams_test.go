// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testStreams(t *testing.T) {
	t.Parallel()

	query := Streams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testStreamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Streams().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStreamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := StreamExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Stream exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StreamExists to return true, but got false.")
	}
}

func testStreamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	streamFound, err := FindStream(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if streamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testStreamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Streams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testStreamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Streams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStreamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	streamOne := &Stream{}
	streamTwo := &Stream{}
	if err = randomize.Struct(seed, streamOne, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}
	if err = randomize.Struct(seed, streamTwo, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Streams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStreamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	streamOne := &Stream{}
	streamTwo := &Stream{}
	if err = randomize.Struct(seed, streamOne, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}
	if err = randomize.Struct(seed, streamTwo, streamDBTypes, false, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = streamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = streamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func streamBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func streamAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Stream) error {
	*o = Stream{}
	return nil
}

func testStreamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Stream{}
	o := &Stream{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, streamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Stream object: %s", err)
	}

	AddStreamHook(boil.BeforeInsertHook, streamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	streamBeforeInsertHooks = []StreamHook{}

	AddStreamHook(boil.AfterInsertHook, streamAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	streamAfterInsertHooks = []StreamHook{}

	AddStreamHook(boil.AfterSelectHook, streamAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	streamAfterSelectHooks = []StreamHook{}

	AddStreamHook(boil.BeforeUpdateHook, streamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	streamBeforeUpdateHooks = []StreamHook{}

	AddStreamHook(boil.AfterUpdateHook, streamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	streamAfterUpdateHooks = []StreamHook{}

	AddStreamHook(boil.BeforeDeleteHook, streamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	streamBeforeDeleteHooks = []StreamHook{}

	AddStreamHook(boil.AfterDeleteHook, streamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	streamAfterDeleteHooks = []StreamHook{}

	AddStreamHook(boil.BeforeUpsertHook, streamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	streamBeforeUpsertHooks = []StreamHook{}

	AddStreamHook(boil.AfterUpsertHook, streamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	streamAfterUpsertHooks = []StreamHook{}
}

func testStreamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(streamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStreamToManyEvents(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Stream
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.StreamID, a.ID)
	queries.Assign(&c.StreamID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Events().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.StreamID, b.StreamID) {
			bFound = true
		}
		if queries.Equal(v.StreamID, c.StreamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := StreamSlice{&a}
	if err = a.L.LoadEvents(ctx, tx, false, (*[]*Stream)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Events = nil
	if err = a.L.LoadEvents(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testStreamToManyAddOpEvents(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Stream
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, streamDBTypes, false, strmangle.SetComplement(streamPrimaryKeyColumns, streamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Event{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEvents(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.StreamID) {
			t.Error("foreign key was wrong value", a.ID, first.StreamID)
		}
		if !queries.Equal(a.ID, second.StreamID) {
			t.Error("foreign key was wrong value", a.ID, second.StreamID)
		}

		if first.R.Stream != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Stream != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Events[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Events[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Events().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testStreamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := StreamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testStreamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Streams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	streamDBTypes = map[string]string{`ID`: `INTEGER`, `Title`: `VARCHAR (512)`, `Description`: `VARCHAR (4096)`, `Archived`: `BOOLEAN`}
	_             = bytes.MinRead
)

func testStreamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(streamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(streamAllColumns) == len(streamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streamDBTypes, true, streamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testStreamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(streamAllColumns) == len(streamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Stream{}
	if err = randomize.Struct(seed, o, streamDBTypes, true, streamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Streams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, streamDBTypes, true, streamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Stream struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(streamAllColumns, streamPrimaryKeyColumns) {
		fields = streamAllColumns
	} else {
		fields = strmangle.SetComplement(
			streamAllColumns,
			streamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := StreamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
